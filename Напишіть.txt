1. Функціональні вимоги (Що система робить)
FR1: Створення проекту 
Опис: Користувач з роллю "Викладач" повинен мати можливість створити новий проект, вказавши його назву, опис, навчальний курс (предмет) та кінцевий термін (дедлайн).
FR2: Формування команди та призначення ролей 
Опис: Користувач з роллю "Лідер" (або "Викладач") повинен мати можливість додавати студентів до проекту та призначати їм ролі ("Розробник", "Тестувальник").
FR3: Управління завданнями (Kanban-дошка) 
Опис: Учасники команди повинні мати можливість створювати картки завдань та переміщувати їх між статусами: "Заплановано" (To Do), "В роботі" (In Progress), "На тестуванні" (In Review) та "Завершено" (Done).
FR4: Верифікація завдань (Роль "Тестувальник") 
Опис: Користувач з роллю "Тестувальник" повинен мати можливість або підтвердити виконання завдання (перемістити у "Завершено"), або повернути його на доопрацювання (перемістити у "В роботі") з коментарем.
FR5: Оцінювання проекту 
Опис: Користувач з роллю "Викладач" повинен мати доступ до завершеного проекту та мати можливість виставити фінальну оцінку (загальну або індивідуальну), а також залишити текстовий відгук (feedback).
2. Нефункціональні вимоги (Як система працює)
NFR1: Продуктивність (Performance) 
Опис: Система повинна завантажувати головну сторінку проекту (включно з канбан-дошкою та списком завдань) не довше ніж за 3 секунди при одночасному підключенні до 100 користувачів (наприклад, потік студентів).
NFR2: Юзабіліті (Usability) 
Опис: Інтерфейс системи має бути інтуїтивно зрозумілим. Новий студент повинен мати змогу знайти свої завдання та змінити їх статус, не вдаючись до читання документації (не більше 3 кліків для зміни статусу завдання).
NFR3: Безпека та контроль доступу (Security) 
Опис: Система повинна чітко розмежовувати доступ на основі ролей. Студент (Розробник, Лідер, Тестувальник) не може бачити проекти команд, до яких він не належить, і ні за яких обставин не може редагувати оцінку, виставлену Викладачем.
3. Обґрунтування вибору моделі життєвого циклу
Для розробки цієї системи найбільш доцільно обрати Ітераційну (Iterative) або Гнучку (Agile) модель, таку як Scrum.
Обґрунтування:
Швидке отримання зворотного зв'язку. Головні користувачі (викладачі та студенти) навряд чи зможуть надати ідеальні вимоги на самому початку. Модель Scrum дозволяє розробити базовий функціонал (наприклад, створення проектів і завдань) і швидко показати його користувачам. Вони дадуть фідбек ("Нам незручно, що немає пріоритетів у завдань"), який команда врахує в наступній ітерації (спринті).
Випуск MVP (Minimum Viable Product). Замість того, щоб півроку розробляти всю систему, ми можемо за 1-2 місяці випустити MVP, який включає лише створення проектів та канбан-дошку. Цим уже можна користуватися, доки команда розробляє складніші модулі (наприклад, систему оцінювання чи диференціацію ролей).
Адаптивність до змін. Вимоги до освітніх інструментів часто змінюються. Наприклад, в середині розробки може з'ясуватися, що потрібна інтеграція з Moodle або GitHub. Waterfall (Водоспадна) модель не впорається з такими змінами гнучко, тоді як Agile дозволяє легко переглянути пріоритети завдань для наступного спринту.
